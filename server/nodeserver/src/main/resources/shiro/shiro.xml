<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

    <!--  util.RetryLimitHashedCredentialsMatcher限制用户尝试登陆次数 -->
	<!--
   <bean id="credentialsMatcher" class="util.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="shiroCacheManager"/>
 	</bean>
    -->
	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="MD5" />
 		<property name="hashIterations" value="1" />
	</bean>

    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类 -->
    <bean id="ShiroDbRealm" class="com.nodeserver.realm.ShiroDbRealm" >
	   	<property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="true" />
    </bean>

 	<!-- session管理器 -->
   <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
       <!-- session的失效时长，单位毫秒 -->
     <property name="globalSessionTimeout" value="1800000"/>
      <!-- 删除失效的session -->
     <property name="deleteInvalidSessions" value="true"/>
   </bean>

 	<!-- 缓存管理器 -->
<!-- 	<bean id="shirocacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml" />
	</bean> -->
	<bean id="shirocacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager">
    </bean>

	<!-- 配置多个realm的时候如何认证 (给authenticator设置id,是因为,在securityManager中要配置authenticator,需要ref它)-->
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
		</property>
	</bean>

    <!-- 安全管理器 -->
    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    	<!-- 单个realm -->
        <property name="realm" ref="ShiroDbRealm" />
        <!-- 多个realm -->
<!-- 		<property name="authenticator" ref="authenticator"></property>
 		<property name="realms">
			<list>
				<ref bean="myRealm"/>
			</list>
		</property> -->
		<!-- 使用配置的缓存管理器 -->
		<property name="cacheManager" ref="shirocacheManager" />
	    <!-- 会话管理 -->
     	<!-- <property name="sessionManager" ref="sessionManager" /> -->
    </bean>

   	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager" />
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
        <!-- <property name="loginUrl" value="/login/login" /> -->
        <!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
        <!-- <property name="successUrl" value="/"/> -->
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp，若使用注解方式授权则无法起作用-->
<!--         <property name="unauthorizedUrl" value="/unauthorized" /> -->
        <property name="filters">
            <map>
                <entry key="logout" value-ref="logoutFilter" />
                <entry key="authc" value-ref="shiroFilterForFetch" />
            </map>
        </property>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->

        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"/>
        </property>
    </bean>

	<bean id="logoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="/index" />
	</bean>

	<!-- 自定义shiro的filter -->
    <bean id="shiroFilterForFetch" class="com.nodeserver.filter.ShiroLoginFilter" />
    
   	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
    		<value>
				/routing = anon
				/login/login = anon
				/login/sendPhoneVerCode = anon
				/resource/** = anon
				/ForgetPwd/** = anon
				<!-- 退出地址 = logout-->
				/logout.do = logout
				<!-- 所有URL都必须认证后访问 -->
				/**=authc
   		 	</value>
		</constructor-arg>
	</bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>
