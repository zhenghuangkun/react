<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc" 
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd 
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        ">
        

    <!-- 它背后注册了很多用于解析注解的处理器,其中就包括<context:annotation-config/>配置的注解所使用的处理器 -->
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config> -->
    <context:component-scan base-package="com.nodeserver.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- <context:component-scan base-package="com.nodeserver.controller" /> -->


	<!-- DispatcherServlet不处理静态资源,交给服务器默认的servlet处理 -->
    <!-- <mvc:default-servlet-handler /> -->

    <!-- 启用annotation -->
    <!-- <mvc:annotation-driven /> -->
    
    <!-- 配置注解映射器和注解适配器 ,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例,validator增加属性验证-->
	<mvc:annotation-driven validator="validator">
		<mvc:message-converters register-defaults="true">
			<bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
				<property name="features">
                    <list>
                        <value>WriteMapNullValue</value>
                        <value>QuoteFieldNames</value>
                    </list>
                </property>
				<property name="dateFormat" value="yyyy-MM-dd HH:mm:ss" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

    <!-- 静态资源解析，包括js,css,img... -->
    <!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
    <!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找 -->
    <!-- 我们可以访问http://IP:8080/xxx/js/my.css和http://IP:8080/xxx/resources/js/my.css对比出来 -->

    <mvc:resources location="/resource/" mapping="/resource/**"/>

    <!-- 视图解析器 -->
    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/pages/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- 文件上传 -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8" />
        <property name="maxUploadSize" value="104857600" />
	    <property name="maxInMemorySize" value="40960" />
    </bean>

    <!-- 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证   ，配置以下两个bean即可实现此功能 ，为spring配置的bean启用Shiro注解。只有在生命周期处理器运行之后才运行 -->
<!--    	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean> -->

<!--     <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>

    </bean> -->



    <!-- 异常页面跳转处理 -->
    <!-- <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                登录
                <prop key="org.apache.shiro.authz.UnauthenticatedException">
                    /unauthorized
                </prop>
                授权
                <prop key="org.apache.shiro.authz.UnauthorizedException">
                    /unauthorized
                </prop>
            </props>
        </property>
    </bean> -->

    <!-- 国际化配置 -->
    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" />
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	    <property name="basenames">
	    <list>
	    	<value>classpath:properties/ValidationMessages</value>
	    </list>
	    </property>

	    <property name="useCodeAsDefaultMessage" value="false"/>
	    <!-- 资源文件编码格式 -->
        <property name="defaultEncoding" value="UTF-8"/>
        <!-- 对资源文件内容缓存时间，单位秒 -->
        <property name="cacheSeconds" value="60"/>
    </bean>
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
	    <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
	    <!-- 这里配置将使用上面国际化配置的messageSource -->
	    <property name="validationMessageSource" ref="messageSource" />
    </bean>


	<bean id="colorGrey" class="java.awt.Color">
		<constructor-arg index="0" type="int" >
			<value>200</value>
		</constructor-arg>
		<constructor-arg index="1" type="int" >
			<value>255</value>
		</constructor-arg>
		<constructor-arg index="2" type="int" >
			<value>200</value>
		</constructor-arg>
	</bean>

	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/sendForgetPwdEmailVerCode"/>
			<mvc:mapping path="/sendEmailVerCode"/>
			<mvc:mapping path="/sendEditPwdVerCode"/>
			<bean class="com.nodeserver.interceptor.RiskControlInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
    <!-- 开启AOP代理-->
<!--    <aop:aspectj-autoproxy proxy-target-class="true"/>
	<bean class="networkPublishing.dailyLog.LogAspect" /> -->
</beans>
